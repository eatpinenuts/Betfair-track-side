{
  "author": {
    "name": "Anton Zemlyanov",
    "email": "anton.zem at google mail"
  },
  "name": "betfair-sports-api",
  "description": "Betfair Sports API for Node",
  "version": "0.4.4",
  "repository": {
    "url": "https://github.com/BetfairTrader/betfair-sports-api"
  },
  "keywords": [
    "betfair"
  ],
  "main": "index.js",
  "dependencies": {
    "async": "*",
    "xml-writer": "*",
    "easysax": "*",
    "cookie": "*"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# Betfair Sports API for Node.js\n\n## Installation ##\n\n    npm install betfair-sports-api\n\n## Tutorial ##\n\nThere is the **[Betfair Sports API for Node.js Tutorial](https://github.com/AlgoTrader/betfair-sports-api/wiki)**\nthat provides quick and easy start with the library. No Node.js and minimal JavaScript knowledge is required.\n**Please note that the tutorial is not finished yet, but is still very good for start.**\n\n## Synopsis ##\n\n### Login to Betfair: ###\n    \n```JavaScript\nvar betfair = require('betfair-sports-api');\nvar login = 'nobody';\nvar password = 'password';\n\nvar session = betfair.newSession(login, password);\nsession.open(function (err, res) {\n    console.log( !err ? \"Login OK\" : \"Login error\"); \n}\n```\n\n### Placing a bet: ###\n\n```JavaScript\nvar bet = { \n        asianLineId: \"0\",\n        betCategoryType: \"E\",\n        betPersistenceType: \"NONE\",\n        betType: \"L\",\n        bspLiability: \"0\",\n        marketId: \"1234567890\",\n        price: \"1.01\",\n        selectionId: \"123456\",\n        size: \"5.00\"\n};\nvar inv = session.placeBets( [bet] );\ninv.execute(function(err, res) {\n    console.log( !err ? \"Bet placed OK\" : \"Bet place error\"); \n}\n```\n\n## Betfair Sports API Reference ##\n\n```JavaScript\nvar betfair = require('betfair-sports-api')\n```\n\nincludes **betfair-sports-api** functions into current module\n\n### Exported functions ###\n\nSummary:\n[newSession](#newSession), [newBetfairPrice](#newBetfairPrice), \n[isBetEmulationEnabled](#isBetEmulationEnabled), [setBetEmulationEnabled](#setBetEmulationEnabled),\n[setXmlLoggingEnabled](#setXmlLoggingEnabled), [getInvocationHistory](#getInvocationHistory)\n\n<a name='newSession'>\n#### var session = betfair.newSession('login','password'); ####\n\nCreates a new session to Betfair, returns `session` object. Session should not be confused with \na HTTPS connection, in fact, session uses a pool of HTTPS connections. `newSession` does not connect to Betfair, \nit just creates the `session` object, call the `open` method to issue a *login* invocation.\nSee the [Session object methods](#sessionObjectMethods) for details.\n\n-----------------------------------------------------------------------------------------------\n\n<a name='newBetfairPrice'>\n#### var betPrice = betfair.newBetfairPrice(size); ####\n\nCreates a new Betfair Price object. The Betfair price cannot be of arbitrary size, it should \nbe a properly rounded (quantized) value. The newBetfairPrice allows to round price to a valid Betfair value, \nincrement and decrement price values. See the [Price object methods](#priceObjectMethods) for details\n\n-----------------------------------------------------------------------------------------------\n\n<a name='sessionObjectMethods'>\n### Session object methods ###\n\nSummary: [open](), [close](), [keepAlive]()\n\n#### session.open( function(err, invocation) {...} ); ####\n\nIssue the **login** invocation using *login* and *password* specified in `newSession` and \ncall the callback on completion. if `err` is null the **login** invocation was successful, otherwise `err` \ndescribes error. You should not worry about the security token, it is remembered in `session.header` \nproperty and used automatically in all the further invacations. Returns nothing.\n\n-----------------------------------------------------------------------------------------------\n\n\n#### session.close( function(err, invocation) {...} ); ####\n\nIssue the **logout** invocation and call the callback on completion. \nif `err` is null the **logout** invocation was successful, otherwise `err` \ndescribes error. Returns nothing.\n\n-----------------------------------------------------------------------------------------------\n\n\n#### var inv = session.keepAlive(); ####\n\nCreates a **keepAlive** invocation object. Use `inv.execute( function(err,inv) {...} )` \nto send the **keepAlive** to server and get its result.\n\n-----------------------------------------------------------------------------------------------\n\n#### var inv = session.getAllMarkets(options) ####\n\nCreates a **getAllMarkets** invocation object. Use `inv.execute( function(err,inv) {...} )` \nto send the **getAllMarkets** to server and get its result. \nThe options are:<BR>\n- `locale`: String<BR>\n    The locale to use when returning results. If not specified, the default \n    locale for the user’s account is used.\n- `eventTypeIds`: Array<BR>\n    If set, the events types to return. If not specified, markets from all event types are returned.\n    For example `[1, 2]` will return only soccer and tennis markets.\n- `fromDate`: Date<BR>\n    If this is set, the response contains only markets where the market time is not before \n    the specified date. A null value indicated no limit.\n- `toDate`: Date<BR>\n   If this is set, the response contains only markets where the market time is not after \n   the specified date. A null value indicated no limit. \n\n-----------------------------------------------------------------------------------------------\n\n#### var inv = session.getMarket(marketId, options); ####\n\nCreates a **getMarket** invocation object for market *marketId*. Use `inv.execute( function(err,inv) {...} )` \nto send the **getMarket** to server and get its result. \nThe options are:<BR>\n- `locale`: String<BR>\n    The locale to use when returning results. If not specified, the default \n    locale for the user’s account is used.\n- `includeCouponLinks`: bool<BR>\n    If you set this parameter to true, the service response contains a list of any \n    coupons that include the market you have requested. If you set the parameter \n    to false, no coupon data is returned.\n\n-----------------------------------------------------------------------------------------------\n\n#### var inv = session.getMarketPricesCompressed(marketId, options); ####\n\nCreates a **getMarketPricesCompressed** invocation object for market *marketId*. \nUse `inv.execute( function(err,inv) {...} )`  to send the **getMarketPricesCompressed** to server \nand get its result. \nThe options are:<BR>\n- `currencyCode`: String<BR>\n    The three letter ISO 4217 code. If not supplied, user’s currency is used\n\n-----------------------------------------------------------------------------------------------\n\n#### var inv = session.getCompleteMarketPricesCompressed(marketId, options); ####\n\nCreates a **getCompleteMarketPricesCompressed** invocation object for market *marketId*. \nUse `inv.execute( function(err,inv) {...} )`  to send the **getCompleteMarketPricesCompressed** to server \nand get its result. \nThe options are:<BR>\n- `currencyCode`: String<BR>\n    The three letter ISO 4217 code. If not supplied, user’s currency is used\n\n-----------------------------------------------------------------------------------------------\n\n#### var inv = session.getMUBets(betStatus, orderBy, count, sortOrder, startRecord, options); ####\n\nCreates a **getMUBets** invocation object for market *marketId*. \nUse `inv.execute( function(err,inv) {...} )`  to send the **getMUBets** to server \nand get its result. \nThe options are:<BR>\n- `currencyCode`: String<BR>\n    The three letter ISO 4217 code. If not supplied, user’s currency is used\n\n-----------------------------------------------------------------------------------------------\n\n<a name='priceObjectMethods'>\n### Price object methods and properties ###\n\n#### price.size ####\n\nThe quantized (or rounded) price value.\n\n",
  "_id": "betfair-sports-api@0.4.4",
  "dist": {
    "shasum": "2a78fd210b4f7be99778b31e99312bf78f8f1da3"
  },
  "_from": "betfair-sports-api"
}
